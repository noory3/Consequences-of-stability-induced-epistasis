#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Modified on Friday June 22 2018

@author: N. Youssef

Simulate alignments under stability-informed site-dependence (S-SD) model 
"""
import helpers
import evolvers
import pickle
num_cores = 10

protein = '1pek'
Neff = int(1e2)
loc = "../Alignments/" + str(protein) + "_Ne2_S-SD/"

#load contact map # 
with open("../contact_maps/" + protein + "_DICT.txt", "rb") as file:
    ContactMapNS = pickle.load(file)


### Simulation ### 
if protein == '1qhw':
	#tree
	T = '(0, ((1, ((2, (3, 4)), ((5, 6), ((7, 8), (9, (10, (11, 12))))))), 13));'
	#branch length
	B = [0.098074, 0.170097, 0.185883, 0.765912, 0.442102, 0.356049, 0.185277, 0.155240, 0.149174, 0.046006, 0.000004, 0.010408, 0.728782, 0.626186, 0.285770, 0.000004,  0.003681, 0.000004,  0.000004,  0.027133, 0.227463,  0.000004, 0.524778, 0.000004, 0.000004, 0.108860]
	#nucleotide frequencies
	pi_nuc = [0.19675, 0.31761, 0.28032, 0.20532] #['T' ,'C' ,'G' ,'A']
	#mutation model
	kappa =  4.49765
	GTR = helpers.MutationMatrix(pi_nuc, kappa,1,1,1,1,kappa)
	#equilibrated sequence 
	RootSeq = "TTACATGAAAGAGAAGAAAGGGAAGACAAGTTTGATCCCAGATTACCTGCGGCGGAGGAGATGTTAATGTACAGGCTTATGGAAGACCTTCGCAGAGCAGACCGTGACATGGGTCCGGACTTTAAAAAGGACGAGAGGGACAAACGGCGCTATATAATTTGGCAGCGCAAATTCATTGATCGTCGCTTTCTACCCAGACTTTTCTTAAGACGCTGCAGACTAGAGGATCTATGGGAAGATTCTTCCGATAGGCGGAAGGGAATGGAAGACTTAGACCCGAGGAGAGAGCGGACTCATAAGCGGGACCTCATCCTATCAGATGGTGAGCCTGCCCTAATAAGGGTTAAAAAGAAAAAGAGGGTGGCTCCGTGTACCGATTCTGAAGAACTCGATCTAATGCAAAACTTTCTGGAGCGCCGTCGTTGCTGCAGGATCATCGAAGTTGACGCTCTCTTTGATATCTGTTGCATGCTCCAAACGTTTACCCGGTTTATCGAAGACATCTTGAGAAGGATCGGCAAATCTAAAAAACGTCTCCGCAGAGATAAGAGATTACTCCAAATTCGGAAACGCACTATTGTTCTTAAGTTACTAGACTCTCCAATCGCGAAACTGCCTGACATCGCCCTAGACAGGATTGATGAGAGGGAACCATCTTGGCCCCCATACATCTTATGTCCCTGTCAGTTTGAGGTGCAAACAGAAGACACGTGGTGGGAAGACGACCCGGAGCTCGAACTGCTTTTGCTACTATGTGACTGTCTGGTCATGAAGATGTTTAGAAAACGTGGTTCATTGCTAATGAGGGAAAAGAGGGATGACCGAATGATGGACACAGCCAGGGACAACGAGATTATTATCATTCTCCGGCTAAATGATTGGCCTAGACTAAAAGAATGT"
	## blx2 simulations ÃŸ
	#B = [b*2 for b in B]
	#scale branch length to have desired interpretation as the expected number of substitutions per site
	T0 = (1.5089651719855113/1000) * (len(RootSeq)/3) 

elif protein == '2ppn':
	#2ppn
	T = '(0,((1,2),(((3,(((4,5),6),((((7,8),9),10),11))),12),13)));'
	B = [0.038, 0.028, 0.062, 0.749, 0.023, 0.038, 0.088, 0.46 , 0.563, 0.274, 0.309, 0.845, 0  , 0.055, 0.145, 0.043, 0.604, 0.108, 0 , 0.377, 0.097, 2.953, 0.016, 0.091, 0.021, 0.049]
	pi_nuc = [0.19246, 0.24559, 0.29365, 0.26830]
	GTR = helpers.MutationMatrix(pi_nuc, 2.50275 ,1,1,1,1,2.50275)
	RootSeq = "GCGCTAGAGATCGAATTCGAGTTCTTCCATGACCAGAGGCAAATGTGTAAATTTCAATGCCAATGCTGCTTGCATAAGAAAAAGATGCTATGGTGTATTTGGGAAATGATTGATCATGATCAGCAGATCGATTTTATTTGTTTTCGTTGTATGCATATGGATCACATGATAATCTGCTTCGTGTTCTGTTTTATTTTCCCACGTCACTTTCGATTCAAACTGAAGATTGGAAAGGATATTCTATGGAAGCGGGATATGATGCGTATTATATGGTGGGAAGAAATGTTAATCGAAATGGATATAGAATGCTGCCAACCTCCG"
	T0 = (7.509615101330118/1000) * (len(RootSeq)/3)

elif protein == '1pek':
	#1pek
	T = '(0,(1,((((2,3),(4,((5,6),(7,8)))),9),(10,11))));'
	B = [0.856, 0.567, 0.279, 0.203, 1.866, 1.204, 0.44 , 0.033, 0.096, 1.395, 0 , 0.347, 1.776, 0.155, 0.137, 0.67 , 0.226, 0.24 , 0.414, 1.184, 0.925, 0.867]
	pi_nuc = [0.20853, 0.34561, 0.25835, 0.18750]
	GTR = helpers.MutationMatrix(pi_nuc, 0.90382 ,1,1,1,1, 0.90382)
	RootSeq = "GAGTTCTTCTGGATGCTTCATGAAGAGTTTGCTCGCTTTCACGGGATGTCGGAAGATGGGATTATTTTCAACCATCACATCACATTGGGTCAGCGCTGGTTCATGTTCGTGCTGGACAAGGGCATAGAGTTGCACCATGATGATTTTGAATTTGAATTTTGTGGTTGCTTCGAGAAGCGGTTAGGCCGCTGCGACGGTAATGGGCGAGGTGAGCCTTGGGCCCCTTATATGATCACGAAACATGAGGCGTTTATTATACGAATGCACTTATTCCACTTCGAGGTAGATGAAATGAACGAAAAAAAAATGCACTGGCAATTGCCTGATATGATGCAGTTCTTCAAGCGGTGTTTTATCATTTGCTCTTGCGAGCGTATATGCATGTTTTGGCTCCAGATAAGGGATCGCAAGGATATGTCGCATAATACATCTTGGAAAGACATGATGTATGAAGTGTTCTTTTTTATGGTCGGCGGGGATAATGAATGCGTTGACCCCAAAGACGAGGACATTCAAAACATGGACTACGTTCTCGCAGTCGGTGGGGATGATAAGAGGAATCGGCGCGGGTGTTGTGATCGTCGCGAGAAGACGACCCTGATCTGCGGCCCTGGGTCTTTTTGGTTACGCCGACGAAGGCGAGAATGGACCCAGTGTTTCTTAGGAACCCCGATGGGAGTACCCATGTTTTGGTTCATGTTTATGTGCCTCATGGATTTCAAAATCAAATGTTTTGCAGACTTACTCCGCGGTATAATCACGATGATGTGCAAGCACGATCAGGAACAACGATCTGTGGACGACATCGAATTATGTTTCTTTTGTATGTATATAGAC"
	T0 = (4.137541585868528/1000) * (len(RootSeq)/3)


Tips, Nodes = evolvers.tree_counter(T)
D = [x*T0 for x in B] ##Scale BL so they are the E[number of substitutions/site]
Tree = evolvers.build_tree(T, D) ### Child, branch length, Parent


for i in range(1, 51):
    S = helpers.Codon_to_Cindex(RootSeq)
    SEQUENCES = evolvers.EvolveAlongTree(Tips, Nodes, Tree, S, num_cores, Neff, GTR, ContactMapNS )
    evolvers._write_output_file(SEQUENCES, Tips, loc + "seqfile" + str(i) +  ".txt")
    print(i , flush = True)
